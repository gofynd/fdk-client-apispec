{
  "item": [
    {
      "id": "2f53fd76-66c0-44a0-a3da-ad5b2823c56a",
      "name": "Configuration",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "a5bf1f35-5e8d-4511-b9ad-a929bf826e50",
          "name": "searchApplication | Search Application",
          "request": {
            "name": "searchApplication | Search Application",
            "description": {
              "content": "Provide application name or domain url",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "service",
                "common",
                "configuration",
                "v1.0",
                "application",
                "search-application"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "query",
                  "value": "<string>",
                  "description": "Provide application name"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "c3d3eb33-1e3d-46e9-963a-c0eab9e5f20c",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "configuration",
                    "v1.0",
                    "application",
                    "search-application"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "query",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "key": "authorization",
                    "value": "ut Ut irure velit eu",
                    "description": ""
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"application\": {\n    \"website\": {\n      \"enabled\": true,\n      \"basepath\": \"/\"\n    },\n    \"cors\": {\n      \"domains\": []\n    },\n    \"auth\": {\n      \"enabled\": true\n    },\n    \"description\": \"test\",\n    \"channel_type\": \"store\",\n    \"cache_ttl\": -1,\n    \"internal\": false,\n    \"is_active\": true,\n    \"mode\": \"live\",\n    \"_id\": \"620b931ee7bfb11f910bf4a3\",\n    \"company_id\": 2,\n    \"name\": \"test\",\n    \"owner\": \"5b9b98150df588546aaea6d2\",\n    \"logo\": {\n      \"secure_url\": \"https://hdn-1.addsale.com/x0/company/164/applications/5efc9913f474c329718e3690/application/pictures/free-logo/original/olqHM8LNr-JioMart-Groceries.png\"\n    },\n    \"favicon\": {\n      \"secure_url\": \"https://hdn-1.addsale.com/x0/company/164/applications/5efc9913f474c329718e3690/application/pictures/free-logo/original/olqHM8LNr-JioMart-Groceries.png\"\n    },\n    \"banner\": {\n      \"secure_url\": \"https://hdn-1.addsale.com/x0/company/164/applications/5efc9913f474c329718e3690/application/pictures/landscape-banner/original/D2fr98CUH-JioMart-Groceries.png\"\n    },\n    \"token\": \"tPQv0nc23\",\n    \"tokens\": [\n      {\n        \"token\": \"tPQv0nc23\",\n        \"created_at\": \"2022-02-15T11:48:46.909Z\"\n      }\n    ],\n    \"domains\": [\n      {\n        \"verified\": true,\n        \"is_primary\": true,\n        \"is_shortlink\": true,\n        \"_id\": \"620b931ee7bfb11f910bf4a4\",\n        \"name\": \"qckvv5lhp.hostfynd.dev\"\n      }\n    ],\n    \"redirections\": [],\n    \"meta\": [],\n    \"created_at\": \"2022-02-15T11:48:46.909Z\",\n    \"modified_at\": \"2022-02-15T11:48:46.909Z\",\n    \"__v\": 0,\n    \"domain\": {\n      \"verified\": true,\n      \"is_primary\": true,\n      \"is_shortlink\": true,\n      \"_id\": \"620b931ee7bfb11f910bf4a4\",\n      \"name\": \"qckvv5lhp.hostfynd.dev\"\n    },\n    \"id\": \"620b931ee7bfb11f910bf4a3\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e5f9970e-d86c-414a-9108-e756f4464471",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "configuration",
                    "v1.0",
                    "application",
                    "search-application"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "query",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "key": "authorization",
                    "value": "ut Ut irure velit eu",
                    "description": ""
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"value\": {\n    \"message\": \"Invalid application domain or id.\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "72bde38c-e53e-4ed6-8f86-e7625af1e05a",
              "name": "Not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "configuration",
                    "v1.0",
                    "application",
                    "search-application"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "query",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "key": "authorization",
                    "value": "ut Ut irure velit eu",
                    "description": ""
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"value\": {\n    \"message\": \"No application found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "563e3eca-1494-45e1-ba74-79cdea1d6efc",
          "name": "getLocations | Get countries, states, cities",
          "request": {
            "name": "getLocations | Get countries, states, cities",
            "description": {},
            "url": {
              "path": [
                "service",
                "common",
                "configuration",
                "v1.0",
                "location"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "location_type",
                  "value": "<string>",
                  "description": "Provide location type to query on. Possible values : country, state, city"
                },
                {
                  "disabled": false,
                  "key": "id",
                  "value": "<string>",
                  "description": "Field is optional when location_type is country. If querying for state, provide id of country. If querying for city, provide id of state."
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "7d6eea9e-9b95-4f58-a659-c77363ac1d2a",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "configuration",
                    "v1.0",
                    "location"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "location_type",
                      "value": "<string>"
                    },
                    {
                      "key": "id",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "043fcc36-c664-4500-ab34-7bc286c4d20a",
      "name": "Webhook",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "d434274b-9697-49c6-9479-663ddb5d1d75",
          "name": "fetchAllWebhookEvents | Get All Webhook Events",
          "request": {
            "name": "fetchAllWebhookEvents | Get All Webhook Events",
            "description": {
              "content": "Get All Webhook Events",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "service",
                "common",
                "webhook",
                "v1.0",
                "events"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "97aa49be-e9f7-467b-8658-9d8814c71741",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "webhook",
                    "v1.0",
                    "events"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"event_configs\": [\n    {\n      \"id\": 64616683,\n      \"event_name\": \"non ex ut Lorem\",\n      \"event_type\": \"ipsum exercitation\",\n      \"event_category\": \"deserunt Duis voluptate irure\",\n      \"version\": \"officia Ut cillum tempor\",\n      \"display_name\": \"laborum elit magna adipisicing consectetur\",\n      \"description\": \"esse in Lorem non anim\",\n      \"created_on\": \"reprehenderit do\"\n    },\n    {\n      \"id\": 33354715,\n      \"event_name\": \"ex\",\n      \"event_type\": \"deserunt commodo dolor nisi\",\n      \"event_category\": \"esse sunt Excepteur irure elit\",\n      \"version\": \"ipsum tempor\",\n      \"display_name\": \"in sunt Excepteur officia\",\n      \"description\": \"quis reprehenderit consequat\",\n      \"created_on\": \"do dolor est\"\n    }\n  ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2c880dc5-c01c-4849-a027-cacf1638f43d",
          "name": "queryWebhookEventDetails | Send webhook event name, type, version, category in request body to get complete details of event from server",
          "request": {
            "name": "queryWebhookEventDetails | Send webhook event name, type, version, category in request body to get complete details of event from server",
            "description": {
              "content": "Get Webhook Event Details for provided events",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "service",
                "common",
                "webhook",
                "v1.0",
                "events",
                "query-event-details"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"event_name\": \"<string>\",\n    \"event_type\": \"<string>\",\n    \"event_category\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  {\n    \"event_name\": \"<string>\",\n    \"event_type\": \"<string>\",\n    \"event_category\": \"<string>\",\n    \"version\": \"<string>\"\n  }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "42254fa5-978b-496d-b75e-33aa01f1c566",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "webhook",
                    "v1.0",
                    "events",
                    "query-event-details"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"event_name\": \"<string>\",\n    \"event_type\": \"<string>\",\n    \"event_category\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  {\n    \"event_name\": \"<string>\",\n    \"event_type\": \"<string>\",\n    \"event_category\": \"<string>\",\n    \"version\": \"<string>\"\n  }\n]",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"event_configs\": [\n    {\n      \"id\": 28230324,\n      \"event_name\": \"enim sed\",\n      \"event_type\": \"Lorem sed\",\n      \"event_category\": \"deserunt\",\n      \"version\": \"in nostrud enim sed ut\",\n      \"display_name\": \"incididunt ad \",\n      \"description\": \"commodo enim ut occaecat incididunt\",\n      \"created_on\": \"laborum sint eiusmod\"\n    },\n    {\n      \"id\": -78821029,\n      \"event_name\": \"qui cupidatat\",\n      \"event_type\": \"sunt exercitation\",\n      \"event_category\": \"consectetur commodo\",\n      \"version\": \"aliqua et commodo veniam\",\n      \"display_name\": \"consectetur minim\",\n      \"description\": \"dolore\",\n      \"created_on\": \"ex dolore exercitation voluptate\"\n    }\n  ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "2a0b0f17-dae3-4783-bc24-eededa18eb05",
      "name": "Inventory",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "bf2305d7-b0e2-43ea-be5f-5e858c02107d",
          "name": "getJobConfigByIntegrationType | Get Job Configs By Integration Type",
          "request": {
            "name": "getJobConfigByIntegrationType | Get Job Configs By Integration Type",
            "description": {
              "content": "REST Endpoint that returns all job Configs by Integration Type",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "service",
                "common",
                "inventory",
                "v1.0",
                "company",
                "job",
                "config"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "integration_type",
                  "value": "<string>",
                  "description": "(Required) Integration Type"
                },
                {
                  "disabled": false,
                  "key": "disable",
                  "value": "false",
                  "description": "JobConfig current state"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "7dcc4619-a1cc-4ea7-8ed2-727c5c98b70e",
              "name": "Successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "inventory",
                    "v1.0",
                    "company",
                    "job",
                    "config"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "integration_type",
                      "value": "<string>"
                    },
                    {
                      "key": "disable",
                      "value": "false"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"timestamp\": \"1954-08-18T11:29:54.991Z\",\n  \"status\": -79519660,\n  \"error\": \"dolore v\",\n  \"exception\": \"in\",\n  \"message\": \"nostrud ipsum elit in ut\",\n  \"total_time_taken_in_millis\": 49833460,\n  \"http_status\": \"451 UNAVAILABLE_FOR_LEGAL_REASONS\",\n  \"items\": [\n    {\n      \"company_id\": 86101073,\n      \"integration_data\": {\n        \"magnabf4\": {}\n      },\n      \"company_name\": \"laborum id labore eu\",\n      \"task_details\": {\n        \"type\": -29287029,\n        \"group_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"threshold_details\": {\n        \"min_price\": -31565142.423612162,\n        \"safe_stock\": -3765787,\n        \"period_threshold\": -37471853,\n        \"period_threshold_type\": \"MONTHS\",\n        \"period_type_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"job_code\": \"est sit dolor\",\n      \"alias\": \"occaecat aute\"\n    },\n    {\n      \"company_id\": -90531657,\n      \"integration_data\": {\n        \"sit_\": {},\n        \"id6\": {}\n      },\n      \"company_name\": \"dolore ullamco\",\n      \"task_details\": {\n        \"type\": -62095693,\n        \"group_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"threshold_details\": {\n        \"min_price\": 21649387.220942944,\n        \"safe_stock\": 71163240,\n        \"period_threshold\": -62024775,\n        \"period_threshold_type\": \"DAYS\",\n        \"period_type_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"job_code\": \"laboris\",\n      \"alias\": \"Ut\"\n    }\n  ],\n  \"payload\": [\n    {\n      \"company_id\": 31384306,\n      \"integration_data\": {\n        \"velit_c8\": {},\n        \"labore_eb4\": {}\n      },\n      \"company_name\": \"proident velit dolor ex Duis\",\n      \"task_details\": {\n        \"type\": -48130699,\n        \"group_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"threshold_details\": {\n        \"min_price\": -52471421.261869855,\n        \"safe_stock\": 56443768,\n        \"period_threshold\": 53515215,\n        \"period_threshold_type\": \"MONTHS\",\n        \"period_type_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"job_code\": \"Lorem labore consectetur nisi\",\n      \"alias\": \"irure proident\"\n    },\n    {\n      \"company_id\": 1356953,\n      \"integration_data\": {\n        \"labore8\": {},\n        \"nulla_27\": {}\n      },\n      \"company_name\": \"occaecat dolor laboris\",\n      \"task_details\": {\n        \"type\": -78719387,\n        \"group_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"threshold_details\": {\n        \"min_price\": 41532706.00392845,\n        \"safe_stock\": 70065344,\n        \"period_threshold\": -9479501,\n        \"period_threshold_type\": \"WEEKS\",\n        \"period_type_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"job_code\": \"non do ipsum dolor\",\n      \"alias\": \"velit ea incididunt aliquip\"\n    }\n  ],\n  \"trace_id\": \"in id magna veniam pariatur\",\n  \"page\": {\n    \"type\": \"consectetur non fugiat deserunt id\",\n    \"size\": -389978,\n    \"current\": 70170766,\n    \"has_next\": false,\n    \"item_total\": 30451222,\n    \"next_id\": \"officia vo\",\n    \"has_previous\": false\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "0195692e-36d3-441f-b1bf-218ba6d0544f",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "inventory",
                    "v1.0",
                    "company",
                    "job",
                    "config"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "integration_type",
                      "value": "<string>"
                    },
                    {
                      "key": "disable",
                      "value": "false"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"timestamp\": \"2007-04-26T13:49:44.259Z\",\n  \"status\": 37963211,\n  \"error\": \"non esse in\",\n  \"exception\": \"exercitation consequat\",\n  \"message\": \"minim\",\n  \"total_time_taken_in_millis\": -99910785,\n  \"http_status\": \"505 HTTP_VERSION_NOT_SUPPORTED\",\n  \"items\": [\n    {\n      \"company_id\": -90506103,\n      \"integration_data\": {\n        \"minime0\": {},\n        \"ea__de\": {}\n      },\n      \"company_name\": \"laborum\",\n      \"task_details\": {\n        \"type\": -66581878,\n        \"group_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"threshold_details\": {\n        \"min_price\": 24861041.990677714,\n        \"safe_stock\": -37378371,\n        \"period_threshold\": 92464367,\n        \"period_threshold_type\": \"HOURS\",\n        \"period_type_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"job_code\": \"exercitation deserunt consequat\",\n      \"alias\": \"veniam dolore in sunt\"\n    },\n    {\n      \"company_id\": 27116961,\n      \"integration_data\": {\n        \"eiusmod_db7\": {},\n        \"sitf3\": {}\n      },\n      \"company_name\": \"minim consectetur anim\",\n      \"task_details\": {\n        \"type\": -63916033,\n        \"group_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"threshold_details\": {\n        \"min_price\": 782879.0286726654,\n        \"safe_stock\": -50476640,\n        \"period_threshold\": -10799548,\n        \"period_threshold_type\": \"WEEKS\",\n        \"period_type_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"job_code\": \"id tempor do\",\n      \"alias\": \"aliqua ipsum\"\n    }\n  ],\n  \"payload\": [\n    {\n      \"company_id\": -27431689,\n      \"integration_data\": {\n        \"dolore_7cc\": {}\n      },\n      \"company_name\": \"ut Lorem occaecat\",\n      \"task_details\": {\n        \"type\": 67314088,\n        \"group_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"threshold_details\": {\n        \"min_price\": -92512608.81129229,\n        \"safe_stock\": -50598408,\n        \"period_threshold\": 19764566,\n        \"period_threshold_type\": \"DAYS\",\n        \"period_type_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"job_code\": \"Duis occaecat Lorem aliqua officia\",\n      \"alias\": \"culpa esse do ad nisi\"\n    },\n    {\n      \"company_id\": 44517090,\n      \"integration_data\": {\n        \"aliquipa\": {},\n        \"dolor7\": {},\n        \"in61\": {}\n      },\n      \"company_name\": \"ad magna et nulla sunt\",\n      \"task_details\": {\n        \"type\": 8221975,\n        \"group_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"threshold_details\": {\n        \"min_price\": 62984151.488117665,\n        \"safe_stock\": 15903884,\n        \"period_threshold\": 64008213,\n        \"period_threshold_type\": \"DAYS\",\n        \"period_type_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"job_code\": \"deserunt incididunt veniam dolore\",\n      \"alias\": \"ullamco\"\n    }\n  ],\n  \"trace_id\": \"veniam\",\n  \"page\": {\n    \"type\": \"consequat enim fugiat\",\n    \"size\": -49359332,\n    \"current\": -70496499,\n    \"has_next\": true,\n    \"item_total\": -87248205,\n    \"next_id\": \"dolor in irure aliquip\",\n    \"has_previous\": true\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "20393d0b-617e-4369-af54-5564866cbf02",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "inventory",
                    "v1.0",
                    "company",
                    "job",
                    "config"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "integration_type",
                      "value": "<string>"
                    },
                    {
                      "key": "disable",
                      "value": "false"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"timestamp\": \"2007-04-26T13:49:44.259Z\",\n  \"status\": 37963211,\n  \"error\": \"non esse in\",\n  \"exception\": \"exercitation consequat\",\n  \"message\": \"minim\",\n  \"total_time_taken_in_millis\": -99910785,\n  \"http_status\": \"505 HTTP_VERSION_NOT_SUPPORTED\",\n  \"items\": [\n    {\n      \"company_id\": -90506103,\n      \"integration_data\": {\n        \"minime0\": {},\n        \"ea__de\": {}\n      },\n      \"company_name\": \"laborum\",\n      \"task_details\": {\n        \"type\": -66581878,\n        \"group_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"threshold_details\": {\n        \"min_price\": 24861041.990677714,\n        \"safe_stock\": -37378371,\n        \"period_threshold\": 92464367,\n        \"period_threshold_type\": \"HOURS\",\n        \"period_type_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"job_code\": \"exercitation deserunt consequat\",\n      \"alias\": \"veniam dolore in sunt\"\n    },\n    {\n      \"company_id\": 27116961,\n      \"integration_data\": {\n        \"eiusmod_db7\": {},\n        \"sitf3\": {}\n      },\n      \"company_name\": \"minim consectetur anim\",\n      \"task_details\": {\n        \"type\": -63916033,\n        \"group_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"threshold_details\": {\n        \"min_price\": 782879.0286726654,\n        \"safe_stock\": -50476640,\n        \"period_threshold\": -10799548,\n        \"period_threshold_type\": \"WEEKS\",\n        \"period_type_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"job_code\": \"id tempor do\",\n      \"alias\": \"aliqua ipsum\"\n    }\n  ],\n  \"payload\": [\n    {\n      \"company_id\": -27431689,\n      \"integration_data\": {\n        \"dolore_7cc\": {}\n      },\n      \"company_name\": \"ut Lorem occaecat\",\n      \"task_details\": {\n        \"type\": 67314088,\n        \"group_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"threshold_details\": {\n        \"min_price\": -92512608.81129229,\n        \"safe_stock\": -50598408,\n        \"period_threshold\": 19764566,\n        \"period_threshold_type\": \"DAYS\",\n        \"period_type_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"job_code\": \"Duis occaecat Lorem aliqua officia\",\n      \"alias\": \"culpa esse do ad nisi\"\n    },\n    {\n      \"company_id\": 44517090,\n      \"integration_data\": {\n        \"aliquipa\": {},\n        \"dolor7\": {},\n        \"in61\": {}\n      },\n      \"company_name\": \"ad magna et nulla sunt\",\n      \"task_details\": {\n        \"type\": 8221975,\n        \"group_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"threshold_details\": {\n        \"min_price\": 62984151.488117665,\n        \"safe_stock\": 15903884,\n        \"period_threshold\": 64008213,\n        \"period_threshold_type\": \"DAYS\",\n        \"period_type_list\": [\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"text\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      \"job_code\": \"deserunt incididunt veniam dolore\",\n      \"alias\": \"ullamco\"\n    }\n  ],\n  \"trace_id\": \"veniam\",\n  \"page\": {\n    \"type\": \"consequat enim fugiat\",\n    \"size\": -49359332,\n    \"current\": -70496499,\n    \"has_next\": true,\n    \"item_total\": -87248205,\n    \"next_id\": \"dolor in irure aliquip\",\n    \"has_previous\": true\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2fad9ea5-87a5-4512-b8c3-f8f9485283cf",
          "name": "getJobCodesMetrics | Find all the JobCodes from Metrics Collection based on the field Values",
          "request": {
            "name": "getJobCodesMetrics | Find all the JobCodes from Metrics Collection based on the field Values",
            "description": {
              "content": "Endpoint to return all JobCodes present in Metrics Collection",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "service",
                "common",
                "inventory",
                "v1.0",
                "company",
                "email",
                "jobCode"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "daily_job",
                  "value": "<boolean>",
                  "description": "Daily Job Flag"
                },
                {
                  "disabled": false,
                  "key": "job_code",
                  "value": "<string>",
                  "description": "Email Job Code"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "fd3f7cd2-03e8-455b-9478-c8819145db7b",
              "name": "Successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "inventory",
                    "v1.0",
                    "company",
                    "email",
                    "jobCode"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "daily_job",
                      "value": "<boolean>"
                    },
                    {
                      "key": "job_code",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"timestamp\": \"2018-06-19T08:44:12.176Z\",\n  \"status\": 67828664,\n  \"error\": \"aliquip sed tempor occaecat dolor\",\n  \"exception\": \"dolor consectetur est reprehenderit tempor\",\n  \"message\": \"aliqua cupidatat cillum consectetur\",\n  \"total_time_taken_in_millis\": -43457174,\n  \"http_status\": \"412 PRECONDITION_FAILED\",\n  \"items\": {},\n  \"payload\": {},\n  \"trace_id\": \"do adipisicing aliqua\",\n  \"page\": {\n    \"type\": \"irure in aute sunt\",\n    \"size\": -33888210,\n    \"current\": -48240110,\n    \"has_next\": false,\n    \"item_total\": 39763235,\n    \"next_id\": \"nostrud fugiat commodo Lorem\",\n    \"has_previous\": true\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ea4fa7b5-2553-46c4-8b47-ffb300cd0294",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "inventory",
                    "v1.0",
                    "company",
                    "email",
                    "jobCode"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "daily_job",
                      "value": "<boolean>"
                    },
                    {
                      "key": "job_code",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"timestamp\": \"2018-06-19T08:44:12.176Z\",\n  \"status\": 67828664,\n  \"error\": \"aliquip sed tempor occaecat dolor\",\n  \"exception\": \"dolor consectetur est reprehenderit tempor\",\n  \"message\": \"aliqua cupidatat cillum consectetur\",\n  \"total_time_taken_in_millis\": -43457174,\n  \"http_status\": \"412 PRECONDITION_FAILED\",\n  \"items\": {},\n  \"payload\": {},\n  \"trace_id\": \"do adipisicing aliqua\",\n  \"page\": {\n    \"type\": \"irure in aute sunt\",\n    \"size\": -33888210,\n    \"current\": -48240110,\n    \"has_next\": false,\n    \"item_total\": 39763235,\n    \"next_id\": \"nostrud fugiat commodo Lorem\",\n    \"has_previous\": true\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e8ead0aa-bab1-4c91-9cb3-b5efd47bda21",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "inventory",
                    "v1.0",
                    "company",
                    "email",
                    "jobCode"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "daily_job",
                      "value": "<boolean>"
                    },
                    {
                      "key": "job_code",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"timestamp\": \"2018-06-19T08:44:12.176Z\",\n  \"status\": 67828664,\n  \"error\": \"aliquip sed tempor occaecat dolor\",\n  \"exception\": \"dolor consectetur est reprehenderit tempor\",\n  \"message\": \"aliqua cupidatat cillum consectetur\",\n  \"total_time_taken_in_millis\": -43457174,\n  \"http_status\": \"412 PRECONDITION_FAILED\",\n  \"items\": {},\n  \"payload\": {},\n  \"trace_id\": \"do adipisicing aliqua\",\n  \"page\": {\n    \"type\": \"irure in aute sunt\",\n    \"size\": -33888210,\n    \"current\": -48240110,\n    \"has_next\": false,\n    \"item_total\": 39763235,\n    \"next_id\": \"nostrud fugiat commodo Lorem\",\n    \"has_previous\": true\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "da5b4e47-9bf3-44a4-9b2e-c4d20f345e00",
          "name": "saveJobCodesMetrics | Save JobCode Metrics",
          "request": {
            "name": "saveJobCodesMetrics | Save JobCode Metrics",
            "description": {
              "content": "Endpoint to save JobCode Metrics",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "service",
                "common",
                "inventory",
                "v1.0",
                "company",
                "email",
                "jobCode"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n  \"executed\": \"<boolean>\",\n  \"id\": \"<string>\",\n  \"job_code\": \"<string>\",\n  \"daily_job\": \"<boolean>\",\n  \"last_executed_on\": \"<dateTime>\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "cf36fa7a-2767-4968-bde9-855660765252",
              "name": "JobCode Metrics entry Created Successfully",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "inventory",
                    "v1.0",
                    "company",
                    "email",
                    "jobCode"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"executed\": \"<boolean>\",\n  \"id\": \"<string>\",\n  \"job_code\": \"<string>\",\n  \"daily_job\": \"<boolean>\",\n  \"last_executed_on\": \"<dateTime>\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"timestamp\": \"2016-05-29T03:55:27.621Z\",\n  \"status\": -52388753,\n  \"error\": \"ad minim dolore\",\n  \"exception\": \"voluptate Lorem\",\n  \"message\": \"voluptate laboris irure velit\",\n  \"total_time_taken_in_millis\": -85571692,\n  \"http_status\": \"429 TOO_MANY_REQUESTS\",\n  \"items\": {\n    \"executed\": \"<boolean>\",\n    \"id\": \"<string>\",\n    \"job_code\": \"<string>\",\n    \"daily_job\": \"<boolean>\",\n    \"last_executed_on\": \"<dateTime>\"\n  },\n  \"payload\": {\n    \"executed\": \"<boolean>\",\n    \"id\": \"<string>\",\n    \"job_code\": \"<string>\",\n    \"daily_job\": \"<boolean>\",\n    \"last_executed_on\": \"<dateTime>\"\n  },\n  \"trace_id\": \"exercitation eu\",\n  \"page\": {\n    \"type\": \"ea\",\n    \"size\": 59246420,\n    \"current\": -49785678,\n    \"has_next\": false,\n    \"item_total\": -63229981,\n    \"next_id\": \"mollit id officia fugiat\",\n    \"has_previous\": false\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "605d58be-4077-488b-9523-16b09ba91134",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "inventory",
                    "v1.0",
                    "company",
                    "email",
                    "jobCode"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"executed\": \"<boolean>\",\n  \"id\": \"<string>\",\n  \"job_code\": \"<string>\",\n  \"daily_job\": \"<boolean>\",\n  \"last_executed_on\": \"<dateTime>\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"timestamp\": \"2016-05-29T03:55:27.621Z\",\n  \"status\": -52388753,\n  \"error\": \"ad minim dolore\",\n  \"exception\": \"voluptate Lorem\",\n  \"message\": \"voluptate laboris irure velit\",\n  \"total_time_taken_in_millis\": -85571692,\n  \"http_status\": \"429 TOO_MANY_REQUESTS\",\n  \"items\": {\n    \"executed\": \"<boolean>\",\n    \"id\": \"<string>\",\n    \"job_code\": \"<string>\",\n    \"daily_job\": \"<boolean>\",\n    \"last_executed_on\": \"<dateTime>\"\n  },\n  \"payload\": {\n    \"executed\": \"<boolean>\",\n    \"id\": \"<string>\",\n    \"job_code\": \"<string>\",\n    \"daily_job\": \"<boolean>\",\n    \"last_executed_on\": \"<dateTime>\"\n  },\n  \"trace_id\": \"exercitation eu\",\n  \"page\": {\n    \"type\": \"ea\",\n    \"size\": 59246420,\n    \"current\": -49785678,\n    \"has_next\": false,\n    \"item_total\": -63229981,\n    \"next_id\": \"mollit id officia fugiat\",\n    \"has_previous\": false\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "29705b3e-2139-4a87-bf18-23d25d5977c3",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "inventory",
                    "v1.0",
                    "company",
                    "email",
                    "jobCode"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"executed\": \"<boolean>\",\n  \"id\": \"<string>\",\n  \"job_code\": \"<string>\",\n  \"daily_job\": \"<boolean>\",\n  \"last_executed_on\": \"<dateTime>\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"timestamp\": \"2016-05-29T03:55:27.621Z\",\n  \"status\": -52388753,\n  \"error\": \"ad minim dolore\",\n  \"exception\": \"voluptate Lorem\",\n  \"message\": \"voluptate laboris irure velit\",\n  \"total_time_taken_in_millis\": -85571692,\n  \"http_status\": \"429 TOO_MANY_REQUESTS\",\n  \"items\": {\n    \"executed\": \"<boolean>\",\n    \"id\": \"<string>\",\n    \"job_code\": \"<string>\",\n    \"daily_job\": \"<boolean>\",\n    \"last_executed_on\": \"<dateTime>\"\n  },\n  \"payload\": {\n    \"executed\": \"<boolean>\",\n    \"id\": \"<string>\",\n    \"job_code\": \"<string>\",\n    \"daily_job\": \"<boolean>\",\n    \"last_executed_on\": \"<dateTime>\"\n  },\n  \"trace_id\": \"exercitation eu\",\n  \"page\": {\n    \"type\": \"ea\",\n    \"size\": 59246420,\n    \"current\": -49785678,\n    \"has_next\": false,\n    \"item_total\": -63229981,\n    \"next_id\": \"mollit id officia fugiat\",\n    \"has_previous\": false\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "db0c4c58-da5f-4fc6-b7d9-6ad25bcff1dd",
              "name": "JobCode Metrics Already Exists",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "inventory",
                    "v1.0",
                    "company",
                    "email",
                    "jobCode"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"executed\": \"<boolean>\",\n  \"id\": \"<string>\",\n  \"job_code\": \"<string>\",\n  \"daily_job\": \"<boolean>\",\n  \"last_executed_on\": \"<dateTime>\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"timestamp\": \"2016-05-29T03:55:27.621Z\",\n  \"status\": -52388753,\n  \"error\": \"ad minim dolore\",\n  \"exception\": \"voluptate Lorem\",\n  \"message\": \"voluptate laboris irure velit\",\n  \"total_time_taken_in_millis\": -85571692,\n  \"http_status\": \"429 TOO_MANY_REQUESTS\",\n  \"items\": {\n    \"executed\": \"<boolean>\",\n    \"id\": \"<string>\",\n    \"job_code\": \"<string>\",\n    \"daily_job\": \"<boolean>\",\n    \"last_executed_on\": \"<dateTime>\"\n  },\n  \"payload\": {\n    \"executed\": \"<boolean>\",\n    \"id\": \"<string>\",\n    \"job_code\": \"<string>\",\n    \"daily_job\": \"<boolean>\",\n    \"last_executed_on\": \"<dateTime>\"\n  },\n  \"trace_id\": \"exercitation eu\",\n  \"page\": {\n    \"type\": \"ea\",\n    \"size\": 59246420,\n    \"current\": -49785678,\n    \"has_next\": false,\n    \"item_total\": -63229981,\n    \"next_id\": \"mollit id officia fugiat\",\n    \"has_previous\": false\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "12fb4fcd-6030-4d7a-83a3-42094759a3c0",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "service",
                    "common",
                    "inventory",
                    "v1.0",
                    "company",
                    "email",
                    "jobCode"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"executed\": \"<boolean>\",\n  \"id\": \"<string>\",\n  \"job_code\": \"<string>\",\n  \"daily_job\": \"<boolean>\",\n  \"last_executed_on\": \"<dateTime>\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"timestamp\": \"2016-05-29T03:55:27.621Z\",\n  \"status\": -52388753,\n  \"error\": \"ad minim dolore\",\n  \"exception\": \"voluptate Lorem\",\n  \"message\": \"voluptate laboris irure velit\",\n  \"total_time_taken_in_millis\": -85571692,\n  \"http_status\": \"429 TOO_MANY_REQUESTS\",\n  \"items\": {\n    \"executed\": \"<boolean>\",\n    \"id\": \"<string>\",\n    \"job_code\": \"<string>\",\n    \"daily_job\": \"<boolean>\",\n    \"last_executed_on\": \"<dateTime>\"\n  },\n  \"payload\": {\n    \"executed\": \"<boolean>\",\n    \"id\": \"<string>\",\n    \"job_code\": \"<string>\",\n    \"daily_job\": \"<boolean>\",\n    \"last_executed_on\": \"<dateTime>\"\n  },\n  \"trace_id\": \"exercitation eu\",\n  \"page\": {\n    \"type\": \"ea\",\n    \"size\": 59246420,\n    \"current\": -49785678,\n    \"has_next\": false,\n    \"item_total\": -63229981,\n    \"next_id\": \"mollit id officia fugiat\",\n    \"has_previous\": false\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "const url = require('url');\nconst querystring = require('querystring');\nconst crypto = require('crypto-js');\nconst sha256 = crypto.SHA256;\nconst hmacSHA256 =  crypto.HmacSHA256;\n\nfunction hmac(key, string, encoding) {\n  return hmacSHA256(string, key).toString();\n}\n\nfunction hash(string, encoding) {\n  return sha256(string).toString();\n}\n\n// This function assumes the string has already been percent encoded\nfunction encodeRfc3986(urlEncodedString) {\n  return urlEncodedString.replace(/[!'()*]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  });\n}\n\nfunction encodeRfc3986Full(str) {\n  return str;\n  // return encodeRfc3986(encodeURIComponent(str));\n}\n\nconst HEADERS_TO_IGNORE = {\n  'authorization': true,\n  'connection': true,\n  'x-amzn-trace-id': true,\n  'user-agent': true,\n  'expect': true,\n  'presigned-expires': true,\n  'range': true,\n};\n\nconst HEADERS_TO_INCLUDE = [\"x\\-fp\\-.*\", \"host\"];\n\n// request: { path | body, [host], [method], [headers], [service], [region] }\nclass RequestSigner {\n  constructor(request) {\n    if (typeof request === 'string') {\n      request = url.parse(request);\n    }\n\n    let headers = request.headers = (request.headers || {});\n    request.headers['host'] = pm.collectionVariables.get(\"baseUrl\").replace(\"https://\", \"\");\n    this.request = request;\n\n    if (!request.method && request.body) {\n      request.method = 'POST';\n    }\n\n  }\n\n  prepareRequest() {\n    this.parsePath();\n\n    let request = this.request;\n    let headers = request.headers;\n    let query;\n\n    if (request.signQuery) {\n\n      this.parsedPath.query = query = this.parsedPath.query || {};\n\n      if (query['x-fp-date']) {\n        this.datetime = query['x-fp-date'];\n      } else {\n        query['x-fp-date'] = this.getDateTime();\n      }\n    } else {\n\n      if (!request.doNotModifyHeaders) {\n        if (request.body && !headers['Content-Type'] && !headers['content-type']) {\n          headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';\n        }\n\n        if (request.body && !headers['Content-Length'] && !headers['content-length']) {\n          headers['Content-Length'] = Buffer.byteLength(request.body);\n        }\n\n        if (headers['x-fp-date']) {\n          this.datetime = headers['x-fp-date'] || headers['x-fp-date'];\n        } else {\n          headers['x-fp-date'] = this.getDateTime();\n        }\n      }\n\n      delete headers[\"x-fp-signature\"];\n      delete headers[\"X-Fp-Signature\"];\n    }\n  }\n\n  sign() {\n    if (!this.parsedPath) {\n      this.prepareRequest();\n    }\n    if (this.request.signQuery) {\n      this.parsedPath.query['x-fp-signature'] = this.signature();\n    } else {\n      this.request.headers['x-fp-signature'] = this.signature();\n    }\n\n    this.request.path = this.formatPath();\n    return this.request;\n  }\n\n  getDateTime() {\n    if (!this.datetime) {\n      let headers = this.request.headers;\n      let date = new Date(headers.Date || headers.date || new Date());\n\n      this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n    }\n    return this.datetime;\n  }\n\n  getDate() {\n    return this.getDateTime().substr(0, 8);\n  }\n\n  signature() {\n    let kCredentials = \"1234567\";\n    let strTosign = this.stringToSign();\n    console.log(strTosign);\n    return `v1.1:${hmac(kCredentials, strTosign, 'hex')}`;\n  }\n\n  stringToSign() {\n    console.log(this.canonicalString())\n    return [\n      this.getDateTime(),\n      hash(this.canonicalString(), 'hex'),\n    ].join('\\n');\n  }\n\n  canonicalString() {\n    if (!this.parsedPath) {\n      this.prepareRequest();\n    }\n\n    let pathStr = this.parsedPath.path;\n    let query = this.parsedPath.query;\n    let headers = this.request.headers;\n    let queryStr = '';\n    let normalizePath = true;\n    let decodePath = this.request.doNotEncodePath;\n    let decodeSlashesInPath = false;\n    let firstValOnly = false;\n    let bodyHash = hash(this.request.body || '', 'hex');\n\n    if (query) {\n      let reducedQuery = Object.keys(query).reduce(function (obj, key) {\n        if (!key) {\n          return obj;\n        }\n        obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] :\n          (firstValOnly ? query[key][0] : query[key]);\n        return obj;\n      }, {});\n      let encodedQueryPieces = [];\n      Object.keys(reducedQuery).sort().forEach(function (key) {\n        if (!Array.isArray(reducedQuery[key])) {\n          encodedQueryPieces.push(key + '=' + encodeRfc3986Full(reducedQuery[key]));\n        } else {\n          reducedQuery[key].map(encodeRfc3986Full).sort()\n            .forEach(function (val) {\n              encodedQueryPieces.push(key + '=' + val);\n            });\n        }\n      });\n      queryStr = encodedQueryPieces.join('&');\n    }\n    if (pathStr !== '/') {\n      if (normalizePath) {\n        pathStr = pathStr.replace(/\\/{2,}/g, '/');\n      }\n      pathStr = pathStr.split('/').reduce(function (path, piece) {\n        if (normalizePath && piece === '..') {\n          path.pop();\n        } else if (!normalizePath || piece !== '.') {\n          if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, ' '))\n          path.push(encodeRfc3986Full(piece));\n        }\n        return path;\n      }, []).join('/');\n      if (pathStr[0] !== '/') pathStr = '/' + pathStr;\n      if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/');\n    }\n\n    let canonicalReq = [\n      this.request.method || 'GET',\n      pathStr,\n      queryStr,\n      this.canonicalHeaders() + '\\n',\n      this.signedHeaders(),\n      bodyHash,\n    ].join('\\n');\n    return canonicalReq;\n  }\n\n  canonicalHeaders() {\n    let headers = this.request.headers;\n\n    function trimAll(header) {\n      return header.toString().trim().replace(/\\s+/g, ' ');\n    }\n    return Object.keys(headers)\n      .filter(function (key) {\n        let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;\n        if (notInIgnoreHeader) {\n          let foundMatch = false;\n          for (let t in HEADERS_TO_INCLUDE) {\n            foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], \"ig\").test(key);\n          }\n          return foundMatch;\n        } else {\n          return false;\n        }\n      })\n      .sort(function (a, b) {\n        return a.toLowerCase() < b.toLowerCase() ? -1 : 1;\n      })\n      .map(function (key) {\n        return key.toLowerCase() + ':' + trimAll(headers[key]);\n      })\n      .join('\\n');\n  }\n\n  signedHeaders() {\n    return Object.keys(this.request.headers)\n      .map(function (key) {\n        return key.toLowerCase();\n      })\n      .filter(function (key) {\n\n        let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;\n        if (notInIgnoreHeader) {\n          let foundMatch = false;\n          for (let t in HEADERS_TO_INCLUDE) {\n            foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], \"ig\").test(key);\n          }\n          return foundMatch;\n        } else {\n          return false;\n        }\n      })\n      .sort()\n      .join(';');\n  }\n\n  parsePath() {\n    let path = this.request.path || '/';\n    let queryIx = path.indexOf('?');\n    let query = null;\n\n    if (queryIx >= 0) {\n      query = querystring.parse(path.slice(queryIx + 1));\n      path = path.slice(0, queryIx);\n    }\n    path = path.split(\"/\").map((t) => {\n      return encodeURIComponent(decodeURIComponent(t));\n    }).join(\"/\");\n\n    this.parsedPath = {\n      path: path,\n      query: query,\n    };\n  }\n\n  formatPath() {\n    let path = this.parsedPath.path;\n    let query = this.parsedPath.query;\n\n    if (!query) {\n      return path;\n    }\n\n    // Services don't support empty query string keys\n    if (query[''] != null) {\n      delete query[''];\n    }\n\n    return path + '?' + encodeRfc3986(querystring.stringify(query));\n  }\n}\n\n\nlet signingOptions = {\n    method: pm.request.method.toUpperCase(),\n    host: pm.collectionVariables.get(\"baseUrl\").replace(\"https://\", \"\"),\n    path: pm.request.url.getPathWithQuery(),\n    body: pm.request.body ? pm.request.body.toString() : null,\n    headers: pm.request.headers\n}\n\nconsole.log(signingOptions)\n\nlet updatedReqData = new RequestSigner(signingOptions).sign();\n\npm.request.headers.add({\n  key: \"x-fp-date\",\n  value: updatedReqData.headers[\"x-fp-date\"]\n});\n\npm.request.headers.add({\n  key: \"x-fp-signature\",\n  value: updatedReqData.headers[\"x-fp-signature\"]\n});\n\nconsole.log(pm.request)"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://api.fyndx0.de"
    }
  ],
  "info": {
    "_postman_id": "a68e901f-0c1a-4639-a3e1-4432cea3898a",
    "name": "Fynd Platform's Public APIs",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "Fynd Platform's Public APIs",
      "type": "text/plain"
    }
  }
}
