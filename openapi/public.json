{
  "info": {
    "title": "Fynd Platform's Public Side APIs",
    "version": "1.4.2-beta.2",
    "description": "Fynd Platform's Public Side APIs"
  },
  "openapi": "3.0.2",
  "paths": {
    "/service/public/billing/v1.0/plan/detailed-list": {
      "get": {
        "summary": "getStandardPlans | Get Standard/Public Plans",
        "description": "Get Standard/Public Plans.\n",
        "x-accessScopes": [
          "company/finance/read"
        ],
        "tags": [
          "Billing"
        ],
        "parameters": [
          {
            "name": "platform_type",
            "in": "query",
            "description": "The type of platform for which plans are requested.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "app/web/both"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailList"
                }
              }
            }
          },
          "400": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                },
                "example": {
                  "message": "Reason is required"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                },
                "example": {
                  "message": "Opps something went wrong !!",
                  "code": "INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/service/common/configuration/v1.0/application/search-application": {
      "get": {
        "description": "Provide application name or domain url",
        "summary": "searchApplication | Search Application",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Provide application name"
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                },
                "example": {
                  "application": {
                    "website": {
                      "enabled": true,
                      "basepath": "/"
                    },
                    "cors": {
                      "domains": []
                    },
                    "auth": {
                      "enabled": true
                    },
                    "description": "test",
                    "channel_type": "store",
                    "cache_ttl": -1,
                    "internal": false,
                    "is_active": true,
                    "mode": "live",
                    "_id": "620b931ee7bfb11f910bf4a3",
                    "company_id": 2,
                    "name": "test",
                    "owner": "5b9b98150df588546aaea6d2",
                    "logo": {
                      "secure_url": "https://hdn-1.addsale.com/x0/company/164/applications/5efc9913f474c329718e3690/application/pictures/free-logo/original/olqHM8LNr-JioMart-Groceries.png"
                    },
                    "favicon": {
                      "secure_url": "https://hdn-1.addsale.com/x0/company/164/applications/5efc9913f474c329718e3690/application/pictures/free-logo/original/olqHM8LNr-JioMart-Groceries.png"
                    },
                    "banner": {
                      "secure_url": "https://hdn-1.addsale.com/x0/company/164/applications/5efc9913f474c329718e3690/application/pictures/landscape-banner/original/D2fr98CUH-JioMart-Groceries.png"
                    },
                    "token": "tPQv0nc23",
                    "tokens": [
                      {
                        "token": "tPQv0nc23",
                        "created_at": "2022-02-15T11:48:46.909Z"
                      }
                    ],
                    "domains": [
                      {
                        "verified": true,
                        "is_primary": true,
                        "is_shortlink": true,
                        "_id": "620b931ee7bfb11f910bf4a4",
                        "name": "qckvv5lhp.hostfynd.dev"
                      }
                    ],
                    "redirections": [],
                    "meta": [],
                    "created_at": "2022-02-15T11:48:46.909Z",
                    "modified_at": "2022-02-15T11:48:46.909Z",
                    "__v": 0,
                    "domain": {
                      "verified": true,
                      "is_primary": true,
                      "is_shortlink": true,
                      "_id": "620b931ee7bfb11f910bf4a4",
                      "name": "qckvv5lhp.hostfynd.dev"
                    },
                    "id": "620b931ee7bfb11f910bf4a3"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                },
                "example": {
                  "value": {
                    "message": "Invalid application domain or id."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                },
                "example": {
                  "value": {
                    "message": "No application found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/service/common/configuration/v1.0/location": {
      "get": {
        "description": "Get Location configuration",
        "tags": [
          "Configuration"
        ],
        "summary": "getLocations | Get countries, states, cities",
        "parameters": [
          {
            "in": "query",
            "name": "location_type",
            "schema": {
              "type": "string",
              "enum": [
                "country",
                "state",
                "city"
              ]
            },
            "description": "Provide location type to query on. Possible values : country, state, city"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "Field is optional when location_type is country. If querying for state, provide id of country. If querying for city, provide id of state."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Locations"
                }
              }
            }
          }
        }
      }
    },
    "/service/public/content/credentials/{entity}": {
      "get": {
        "description": "Get credentials for support system",
        "summary": "getCredentialsByEntity | Get credentials to power chat support systems",
        "parameters": [
          {
            "in": "path",
            "name": "entity",
            "description": "Server Type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Refer `CredentialsSchema` for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsSchema"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/CredentialsExample"
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "Bad Request. See the error object in the response body to know the exact reason.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentAPIError"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/4XXAPIError"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Content"
        ]
      }
    },
    "/service/common/inventory/v1.0/company/email/jobCode": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "getJobCodesMetrics | Find all the JobCodes from Metrics Collection based on the field Values",
        "description": "Endpoint to return all JobCodes present in Metrics Collection",
        "parameters": [
          {
            "name": "daily_job",
            "in": "query",
            "description": "Daily Job Flag",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "job_code",
            "in": "query",
            "description": "Email Job Code",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeObject"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeObject"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeObject"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "saveJobCodesMetrics | Save JobCode Metrics",
        "description": "Endpoint to save JobCode Metrics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailJobMetrics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "JobCode Metrics entry Created Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeEmailJobMetrics"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeEmailJobMetrics"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeEmailJobMetrics"
                }
              }
            }
          },
          "409": {
            "description": "JobCode Metrics Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeEmailJobMetrics"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeEmailJobMetrics"
                }
              }
            }
          }
        }
      }
    },
    "/service/common/inventory/v1.0/company/slingshot": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "getConfigByApiKey | Get Slingshot Configuration Of  A Company using API key",
        "description": "REST Endpoint that returns all configuration detail of a company",
        "parameters": [
          {
            "name": "apikey",
            "in": "query",
            "description": "Api key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeSlingshotConfigurationDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeSlingshotConfigurationDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeSlingshotConfigurationDetail"
                }
              }
            }
          }
        }
      }
    },
    "/service/common/inventory/v1.0/company/slingshot/apikey": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "getApiKey | Get apikey  for  Company  to call other Slingshot Configuration APIs ",
        "description": "REST Endpoint that returns apikey by username by password",
        "parameters": [
          {
            "name": "user_name",
            "in": "query",
            "description": "Integration id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "company/store token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeApikeyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeApikeyModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeApikeyModel"
                }
              }
            }
          }
        }
      }
    },
    "/service/common/inventory/v1.0/company/jobs/code/{code}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "getJobByCode | Get Job Config By Code",
        "description": "REST Endpoint that returns job config by code",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Job Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeJobConfigDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeJobConfigDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeJobConfigDTO"
                }
              }
            }
          }
        }
      }
    },
    "/service/common/inventory/v1.0/company/job/config": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "getJobConfigByIntegrationType | Get Job Configs By Integration Type",
        "description": "REST Endpoint that returns all job Configs by Integration Type",
        "parameters": [
          {
            "name": "integration_type",
            "in": "query",
            "description": "Integration Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "JobConfig current state",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeListJobConfigDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeListJobConfigDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeListJobConfigDTO"
                }
              }
            }
          }
        }
      }
    },
    "/service/panel/partners/v1.0/extensions/{slug}": {
      "get": {
        "description": "Use this API to get extension details",
        "summary": "getPanelExtensionDetails | Get extension details",
        "tags": [
          "Partner"
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "pass the slug of the extension",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "example-extension-1"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionUsingSlug"
                },
                "example": {
                  "_id": "633ab5cb635a41fdde9fb648",
                  "organization_id": "6333fef3b1d85e44e738c138",
                  "extension_id": "633425ebb1d85e44e738c2ab",
                  "slug": "example-extension-1",
                  "scope": [
                    "company/profile",
                    "company/saleschannel",
                    "company/product",
                    "company/order",
                    "company/application/customer",
                    "company/application/analytics",
                    "company/application/storage",
                    "company/application/marketing",
                    "company/application/catalogue",
                    "company/application/communication",
                    "company/application/support",
                    "company/application/order",
                    "company/application/settings"
                  ],
                  "category": {
                    "categories_l1": [],
                    "categories_l2": []
                  },
                  "listing_info": {
                    "name": "ujjawal-example-extension-1",
                    "keywords": [],
                    "tagline": "test-extension for test how extensions look and work and how to create them",
                    "icon": "https://hdn-1.addsale.com/x0/misc/pictures/free-icon/original/AMwIEOw0U-logo.png"
                  },
                  "details": {
                    "benefits": [
                      {
                        "title": "Works fast",
                        "description": "works fast",
                        "_id": "633ab5cb635a41fdde9fb649"
                      }
                    ],
                    "screenshots": {
                      "desktop": [
                        "https://hdn-1.addsale.com/x0/misc/pictures/free-icon/original/g95yHXkou-1024x576.png",
                        "https://hdn-1.addsale.com/x0/misc/pictures/free-icon/original/IKdHxP2fN-1024x576.png",
                        "https://hdn-1.addsale.com/x0/misc/pictures/free-icon/original/_auq1yvEp-1024x576.png"
                      ],
                      "mobile": [
                        "https://hdn-1.addsale.com/x0/misc/pictures/free-icon/original/E_YAHM9cU-600x900.png",
                        "https://hdn-1.addsale.com/x0/misc/pictures/free-icon/original/vEnXw9cCg-600x900.png",
                        "https://hdn-1.addsale.com/x0/misc/pictures/free-icon/original/O3Wng4Rqn-600x900.png"
                      ]
                    },
                    "description": "Sample public extension",
                    "demo_url": "",
                    "video_url": [
                      {
                        "type": "video",
                        "url": "https://hdn-1.addsale.com/x0/products/videos/item/free/original/kizLVNWyS-video-sc-1.mp4"
                      }
                    ],
                    "integrations": []
                  },
                  "plan_type": "free",
                  "plans": [
                    {
                      "name": "Custom Free",
                      "features": "provides ease",
                      "type": "free",
                      "price": {
                        "amount": 0,
                        "currency": "INR"
                      },
                      "trial_days": 0,
                      "additional_charges": ""
                    }
                  ],
                  "plans_url": "",
                  "contact_info": {
                    "support": {
                      "email": "ujjawaltaleja@gofynd.com",
                      "phone": "7988169279",
                      "website_url": "",
                      "faq_url": "",
                      "privacy_policy_url": ""
                    }
                  },
                  "current_status": "active",
                  "coming_soon": {
                    "is_coming_soon": false,
                    "upvote_count": 0
                  },
                  "created_at": "2022-10-03T10:13:31.607Z",
                  "modified_at": "2022-10-03T10:13:31.607Z",
                  "organization": {
                    "name": "ujjawal-partners-fashion",
                    "slug": "ujjawa-w7t-68"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/service/common/webhook/v1.0/events": {
      "get": {
        "description": "Get All Webhook Events",
        "summary": "fetchAllWebhookEvents | Get All Webhook Events",
        "x-accessScopes": [
          "webhook/events"
        ],
        "tags": [
          "Webhook"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventConfigResponse"
                },
                "examples": {
                  "success": {
                    "value": {
                      "event_configs": [
                        {
                          "id": 1,
                          "event_name": "article",
                          "event_type": "create",
                          "event_category": "application",
                          "version": "1",
                          "display_name": "article",
                          "description": "This event gets triggered when an article is created",
                          "event_schema": null,
                          "created_on": "2021-12-20T17:38:22.922Z",
                          "updated_on": "2023-07-26T12:30:30.930Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/service/common/webhook/v1.0/events/query-event-details": {
      "post": {
        "description": "Get Webhook Event Details for provided events",
        "summary": "queryWebhookEventDetails | Send webhook event name, type, version, category in request body to get complete details of event from server",
        "x-accessScopes": [
          "webhook/events"
        ],
        "tags": [
          "Webhook"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventConfigBase"
                }
              },
              "examples": {
                "success": {
                  "value": [
                    {
                      "event_name": "article",
                      "event_type": "update",
                      "event_category": "company",
                      "version": "1"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventConfigResponse"
                },
                "examples": {
                  "success": {
                    "value": {
                      "event_configs": [
                        {
                          "id": 1,
                          "event_name": "article",
                          "event_type": "create",
                          "event_category": "application",
                          "version": "1",
                          "display_name": "article",
                          "description": "This event gets triggered when an article is created",
                          "event_schema": null,
                          "created_on": "2021-12-20T17:38:22.922Z",
                          "updated_on": "2023-07-26T12:30:30.930Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/service/common/webhook/v1.0/events/depricated-event-notifier": {
      "get": {
        "description": "Notifies all the events that are subscribed and are going to deprecate or new version is available for those events",
        "summary": "notifyDepricatedEvent | Notifies all the events that are going to depricate",
        "x-accessScopes": [
          "webhook/events"
        ],
        "tags": [
          "Webhook"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventNotifier"
                },
                "examples": {
                  "success": {
                    "value": {
                      "event_configs": [
                        {
                          "id": 1,
                          "event_name": "article",
                          "event_type": "create",
                          "event_category": "application",
                          "version": "1",
                          "display_name": "article",
                          "description": "This event gets triggered when an article is created",
                          "event_schema": null,
                          "created_on": "2021-12-20T17:38:22.922Z",
                          "updated_on": "2023-07-26T12:30:30.930Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/service/common/webhook/v1.0/events/transform-event": {
      "post": {
        "description": "Test transformation of handler",
        "summary": "testHandlerTransformation | Test transformation of handler",
        "x-accessScopes": [
          "webhook/events"
        ],
        "tags": [
          "Webhook"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransformEventRequest"
              },
              "examples": {
                "success": {
                  "value": {
                    "event_name": "location",
                    "event_type": "create",
                    "event_category": "company",
                    "event_version": "1",
                    "event": {
                      "payload": {
                        "location": {
                          "_id": "653720d892a8429b6fb9563e",
                          "created_on": "2023-10-24T01:41:44.450008",
                          "modified_on": "2023-10-24T01:41:44.450015"
                        }
                      },
                      "meta": {
                        "event": {
                          "type": "create",
                          "name": "location",
                          "version": "1"
                        },
                        "company_id": 6086,
                        "service": {
                          "name": "WheelJack"
                        },
                        "trace_id": [
                          "WheelJack.7cfeea2e-720e-11ee-8f26-ca3fc26a3fda"
                        ],
                        "created_timestamp": 1698111704725
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformEventResponse"
                },
                "examples": {
                  "success": {
                    "value": {
                      "event_trace_id": [
                        "WheelJack.7cfeea2e-720e-11ee-8f26-ca3fc26a3fda"
                      ],
                      "data": {
                        "event": {
                          "trace_id": [
                            "WheelJack.7cfeea2e-720e-11ee-8f26-ca3fc26a3fda"
                          ],
                          "name": "location",
                          "type": "create",
                          "version": "1",
                          "created_timestamp": 1698111704725
                        },
                        "company_id": 6086,
                        "contains": [
                          "location"
                        ],
                        "payload": {
                          "location": {
                            "_id": "653720d892a8429b6fb9563e",
                            "created_on": "2023-10-24T01:41:44.450008",
                            "modified_on": "2023-10-24T01:41:44.450015"
                          }
                        }
                      },
                      "event_name": "location",
                      "version": "1",
                      "status": false,
                      "event_type": "create",
                      "service_meta": {
                        "name": "WheelJack"
                      },
                      "association": {
                        "company_id": 6086
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/service/common/webhook/v1.0/events/validate-event-schema": {
      "post": {
        "description": "Validate Schema for an event",
        "summary": "validateSchema | Validate Schema for an event",
        "x-accessScopes": [
          "webhook/events"
        ],
        "tags": [
          "Webhook"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateSchemaRequest"
              },
              "examples": {
                "success": {
                  "value": {
                    "event_name": "location",
                    "event_type": "create",
                    "event_category": "company",
                    "event_version": "1",
                    "event": {
                      "payload": {
                        "location": {
                          "_id": "653720d892a8429b6fb9563e",
                          "created_on": "2023-10-24T01:41:44.450008",
                          "modified_on": "2023-10-24T01:41:44.450015"
                        }
                      },
                      "meta": {
                        "event": {
                          "type": "create",
                          "name": "location",
                          "version": "1"
                        },
                        "company_id": 6086,
                        "service": {
                          "name": "WheelJack"
                        },
                        "trace_id": [
                          "WheelJack.7cfeea2e-720e-11ee-8f26-ca3fc26a3fda"
                        ],
                        "created_timestamp": 1698111704725
                      }
                    },
                    "event_schema": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateSchemaResponse"
                },
                "examples": {
                  "success": {
                    "value": {
                      "status": true,
                      "message": "Valid schema for this event"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "InternalServerError": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Internal server Server error",
            "type": "string"
          },
          "code": {
            "description": "Error code",
            "type": "string"
          }
        }
      },
      "PlanRecurring": {
        "type": "object",
        "properties": {
          "interval": {
            "type": "string",
            "example": "month"
          },
          "interval_count": {
            "type": "number",
            "example": 3
          }
        }
      },
      "Plan": {
        "type": "object",
        "properties": {
          "recurring": {
            "$ref": "#/components/schemas/PlanRecurring"
          },
          "is_trial_plan": {
            "type": "boolean",
            "example": true
          },
          "plan_group": {
            "type": "string",
            "example": "default"
          },
          "tag_lines": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "This is 2020won trial plan"
            }
          },
          "currency": {
            "type": "string",
            "example": "INR"
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "is_visible": {
            "type": "boolean",
            "example": false
          },
          "trial_period": {
            "type": "number",
            "example": 30
          },
          "addons": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "example": "public"
          },
          "country": {
            "type": "string",
            "example": "IN"
          },
          "_id": {
            "type": "string",
            "example": "5f0dcd866173cb003706098f"
          },
          "name": {
            "type": "string",
            "example": "30 day Trial"
          },
          "description": {
            "type": "string",
            "example": "30 day Trial"
          },
          "amount": {
            "type": "number",
            "example": 0
          },
          "product_suite_id": {
            "type": "string",
            "example": "5f0dcd866173cb0037060975"
          },
          "created_at": {
            "type": "string",
            "example": "2020-07-14T15:21:42.959Z"
          },
          "modified_at": {
            "type": "string",
            "example": "2020-07-14T15:21:42.959Z"
          }
        }
      },
      "DetailList": {
        "type": "object",
        "properties": {
          "plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Plan"
            }
          },
          "trial_plan": {
            "$ref": "#/components/schemas/Plan"
          },
          "component_groups": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Key Features"
            }
          }
        }
      },
      "ApplicationResponse": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/Application"
          }
        }
      },
      "Domain": {
        "type": "object",
        "properties": {
          "verified": {
            "type": "boolean",
            "description": "Indicates domain is verified or not. TXT and A records should propagate correctly."
          },
          "is_primary": {
            "type": "boolean",
            "description": "Indicates domain is primary or not. Primary domain is the default/main domain."
          },
          "is_shortlink": {
            "type": "boolean",
            "description": "Shortlink is present or not for the domain"
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier (24-digit Mongo Object ID) of the domain"
          },
          "name": {
            "type": "string"
          },
          "is_predefined": {
            "type": "boolean",
            "description": "Domain is hosting domain or not"
          }
        }
      },
      "ApplicationWebsite": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Shows whether sales channel website URL is enabled or not"
          },
          "basepath": {
            "type": "string",
            "description": "Base path for the current sales channel website"
          }
        }
      },
      "ApplicationCors": {
        "type": "object",
        "properties": {
          "domains": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "List of all the domains added to the sales channel"
            }
          }
        }
      },
      "ApplicationAuth": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Shows sales channel auth is enabled or not enabled."
          }
        }
      },
      "ApplicationRedirections": {
        "type": "object",
        "properties": {
          "redirect_from": {
            "type": "string",
            "description": "Old domain URL of the sales channel"
          },
          "redirect_to": {
            "type": "string",
            "description": "New domain URL of the sales channel. Users will be automatically redirected from old domain to new domain."
          },
          "type": {
            "type": "string",
            "description": "It shows domain redirection type. Permanent redirection is for long time period redirection, and temporary redirection for a short time period.",
            "enum": [
              "permanent",
              "temporary"
            ]
          }
        }
      },
      "ApplicationMeta": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Indicates the name of application meta"
          },
          "value": {
            "type": "string",
            "description": "Value related to application meta name"
          }
        }
      },
      "SecureUrl": {
        "type": "object",
        "properties": {
          "secure_url": {
            "type": "string",
            "description": "Hosted URL of the image"
          }
        }
      },
      "Application": {
        "properties": {
          "website": {
            "$ref": "#/components/schemas/ApplicationWebsite"
          },
          "cors": {
            "$ref": "#/components/schemas/ApplicationCors"
          },
          "auth": {
            "$ref": "#/components/schemas/ApplicationAuth"
          },
          "description": {
            "type": "string",
            "description": "It contains detailed information about the sales channel"
          },
          "channel_type": {
            "type": "string",
            "description": "It indicates different channel types like store, website-and-mobile-apps. Default value is store."
          },
          "cache_ttl": {
            "type": "integer",
            "format": "int32",
            "description": "An integer value that specifies the number of seconds until the key expires"
          },
          "is_internal": {
            "type": "boolean",
            "description": "Indicates whether a sales channel is internal or not"
          },
          "is_active": {
            "type": "boolean",
            "description": "Indicates whether a sales channel is active or not active"
          },
          "_id": {
            "type": "string",
            "description": "The unique identifier (24-digit Mongo Object ID) of the sales channel"
          },
          "name": {
            "type": "string",
            "description": "Name of the sales channel, e.g. Zenz Fashion"
          },
          "owner": {
            "type": "string",
            "description": "The unique identifier (24-digit Mongo Object ID) of owner who owns the application"
          },
          "company_id": {
            "type": "integer",
            "format": "int32",
            "description": "Numeric ID allotted to a business account where the sales channel exists"
          },
          "token": {
            "type": "string",
            "description": "Randomly generated fixed-length string for sales channel. It is required and auto-generated."
          },
          "redirections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationRedirections"
            }
          },
          "meta": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationMeta"
            }
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 timestamp of sales channel creation"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 timestamp of sales channel updation"
          },
          "__v": {
            "type": "integer",
            "format": "int32",
            "description": "Version key for tracking revisions. Default value is zero."
          },
          "banner": {
            "$ref": "#/components/schemas/SecureUrl"
          },
          "logo": {
            "$ref": "#/components/schemas/SecureUrl"
          },
          "favicon": {
            "$ref": "#/components/schemas/SecureUrl"
          },
          "domains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Domain"
            }
          },
          "app_type": {
            "type": "string",
            "description": "It shows whether application is live or in development mode",
            "enum": [
              "live",
              "development"
            ]
          },
          "mobile_logo": {
            "$ref": "#/components/schemas/SecureUrl"
          },
          "domain": {
            "$ref": "#/components/schemas/Domain"
          },
          "slug": {
            "type": "string"
          }
        }
      },
      "NotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message for not found"
          }
        }
      },
      "BadRequest": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Failure message (in a string format)",
            "type": "string"
          }
        }
      },
      "LocationDefaultLanguage": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "English"
          },
          "code": {
            "type": "string",
            "example": "en-IN"
          }
        }
      },
      "LocationDefaultCurrency": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Indian Rupee"
          },
          "symbol": {
            "type": "string",
            "example": "₹"
          },
          "code": {
            "type": "string",
            "example": "INR"
          }
        }
      },
      "LocationCountry": {
        "type": "object",
        "properties": {
          "capital": {
            "type": "string",
            "example": "Kabul"
          },
          "currency": {
            "type": "string",
            "example": "AFN"
          },
          "iso2": {
            "type": "string",
            "example": "AF"
          },
          "iso3": {
            "type": "string",
            "example": "AFG"
          },
          "name": {
            "type": "string",
            "example": "Afghanistan"
          },
          "parent": {
            "type": "string",
            "format": "nullable"
          },
          "phone_code": {
            "type": "string",
            "example": "990999092"
          },
          "type": {
            "type": "string",
            "example": "country"
          },
          "uid": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "__v": {
            "type": "integer",
            "format": "int32",
            "example": 0
          },
          "_id": {
            "type": "string",
            "example": "5ec50c613c403900600fcdec,"
          },
          "default_currency": {
            "$ref": "#/components/schemas/LocationDefaultCurrency"
          },
          "default_language": {
            "$ref": "#/components/schemas/LocationDefaultLanguage"
          },
          "state_code": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          }
        }
      },
      "Locations": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationCountry"
            }
          }
        }
      },
      "CredentialSchema": {
        "type": "object",
        "properties": {
          "configuration": {
            "type": "object"
          },
          "entity_type": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "is_enable": {
            "type": "boolean"
          }
        }
      },
      "CredentialsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialSchema"
            }
          }
        }
      },
      "ContentAPIError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "number"
          },
          "code": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "info": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          },
          "stack_trace": {
            "type": "string"
          },
          "meta": {
            "type": "object"
          }
        }
      },
      "EmailJobMetrics": {
        "type": "object",
        "properties": {
          "executed": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "job_code": {
            "type": "string"
          },
          "daily_job": {
            "type": "boolean"
          },
          "last_executed_on": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Page": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "current": {
            "type": "integer",
            "format": "int32"
          },
          "has_next": {
            "type": "boolean"
          },
          "item_total": {
            "type": "integer",
            "format": "int32"
          },
          "next_id": {
            "type": "string"
          },
          "has_previous": {
            "type": "boolean"
          }
        }
      },
      "ResponseEnvelopeEmailJobMetrics": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "total_time_taken_in_millis": {
            "type": "integer",
            "format": "int64"
          },
          "http_status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "items": {
            "$ref": "#/components/schemas/EmailJobMetrics"
          },
          "payload": {
            "$ref": "#/components/schemas/EmailJobMetrics"
          },
          "trace_id": {
            "type": "string"
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "GCompany": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "integration": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "uid": {
            "type": "integer",
            "format": "int32"
          },
          "opted": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "stores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GStore"
            }
          }
        }
      },
      "GStore": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "integration": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "uid": {
            "type": "integer",
            "format": "int32"
          },
          "opted": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/StoreData"
          }
        }
      },
      "Metum": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ResponseEnvelopeSlingshotConfigurationDetail": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "total_time_taken_in_millis": {
            "type": "integer",
            "format": "int64"
          },
          "http_status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "items": {
            "$ref": "#/components/schemas/SlingshotConfigurationDetail"
          },
          "payload": {
            "$ref": "#/components/schemas/SlingshotConfigurationDetail"
          },
          "trace_id": {
            "type": "string"
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "SlingshotConfigurationDetail": {
        "type": "object",
        "properties": {
          "integration": {
            "$ref": "#/components/schemas/SlingshotIntegration"
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GCompany"
            }
          }
        }
      },
      "SlingshotIntegration": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metum"
            }
          }
        }
      },
      "StoreData": {
        "type": "object",
        "properties": {
          "location_id": {
            "type": "string"
          }
        }
      },
      "ApikeyModel": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string"
          },
          "error_message": {
            "type": "string"
          }
        }
      },
      "ResponseEnvelopeApikeyModel": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "total_time_taken_in_millis": {
            "type": "integer",
            "format": "int64"
          },
          "http_status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "items": {
            "$ref": "#/components/schemas/ApikeyModel"
          },
          "payload": {
            "$ref": "#/components/schemas/ApikeyModel"
          },
          "trace_id": {
            "type": "string"
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "DataTresholdDTO": {
        "type": "object",
        "properties": {
          "min_price": {
            "type": "number",
            "format": "double"
          },
          "safe_stock": {
            "type": "integer",
            "format": "int32"
          },
          "period_threshold": {
            "type": "integer",
            "format": "int32"
          },
          "period_threshold_type": {
            "type": "string",
            "enum": [
              "DAYS",
              "HOURS",
              "WEEKS",
              "MONTHS"
            ]
          },
          "period_type_list": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/GenericDTO"
            }
          }
        }
      },
      "GenericDTO": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "JobConfigDTO": {
        "required": [
          "company_id",
          "integration"
        ],
        "type": "object",
        "properties": {
          "integration_data": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "company_name": {
            "type": "string"
          },
          "integration": {
            "type": "string",
            "writeOnly": true
          },
          "company_id": {
            "type": "integer",
            "format": "int32"
          },
          "task_details": {
            "$ref": "#/components/schemas/TaskDTO"
          },
          "threshold_details": {
            "$ref": "#/components/schemas/DataTresholdDTO"
          },
          "job_code": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          }
        }
      },
      "ResponseEnvelopeJobConfigDTO": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "total_time_taken_in_millis": {
            "type": "integer",
            "format": "int64"
          },
          "http_status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "items": {
            "$ref": "#/components/schemas/JobConfigDTO"
          },
          "payload": {
            "$ref": "#/components/schemas/JobConfigDTO"
          },
          "trace_id": {
            "type": "string"
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "TaskDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "group_list": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/GenericDTO"
            }
          }
        }
      },
      "ResponseEnvelopeListJobConfigDTO": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "total_time_taken_in_millis": {
            "type": "integer",
            "format": "int64"
          },
          "http_status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobConfigDTO"
            }
          },
          "payload": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobConfigDTO"
            }
          },
          "trace_id": {
            "type": "string"
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "ResponseEnvelopeObject": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "total_time_taken_in_millis": {
            "type": "integer",
            "format": "int64"
          },
          "http_status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "items": {
            "type": "object"
          },
          "payload": {
            "type": "object"
          },
          "trace_id": {
            "type": "string"
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "CategoryL1": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "level": {
            "type": "number"
          },
          "logo": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "CategoryL2": {
        "type": "object",
        "properties": {
          "parent": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "level": {
            "type": "number"
          },
          "slug": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "CategoryCommon": {
        "type": "object",
        "properties": {
          "category_l1": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryL1"
            }
          },
          "category_l2": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryL2"
            }
          }
        }
      },
      "ContactInfo": {
        "type": "object",
        "properties": {
          "support": {
            "$ref": "#/components/schemas/Support"
          }
        }
      },
      "ExtensionUsingSlug": {
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/CategoryCommon"
          },
          "contact_info": {
            "$ref": "#/components/schemas/ContactInfo"
          },
          "created_at": {
            "type": "string"
          },
          "current_status": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/Details"
          },
          "extension_id": {
            "type": "string"
          },
          "is_coming_soon": {
            "type": "boolean"
          },
          "listing_info": {
            "$ref": "#/components/schemas/ListingInfo"
          },
          "modified_at": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "organization_id": {
            "type": "string"
          },
          "plan_type": {
            "type": "string"
          },
          "plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Plans"
            }
          },
          "plans_url": {
            "type": "string"
          },
          "review_instructions": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "slug": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "Organization": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        }
      },
      "ListingInfo": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "tagline": {
            "type": "string"
          }
        }
      },
      "Benefits": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Screenshots": {
        "type": "object",
        "properties": {
          "desktop": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mobile": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Details": {
        "type": "object",
        "properties": {
          "benefits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Benefits"
            }
          },
          "demo_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "integration": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "video_url": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "youtube": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "screenshots": {
            "$ref": "#/components/schemas/Screenshots"
          }
        }
      },
      "Support": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "faq_url": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "privacy_policy_url": {
            "type": "string"
          },
          "website_url": {
            "type": "string"
          }
        }
      },
      "Price": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        }
      },
      "Plans": {
        "type": "object",
        "properties": {
          "additional_charges": {
            "type": "string"
          },
          "features": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "trial_days": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "recurring": {
            "$ref": "#/components/schemas/Recurring"
          }
        }
      },
      "Recurring": {
        "type": "object",
        "properties": {
          "recurring_time": {
            "type": "number"
          },
          "yearly_amount": {
            "type": "number"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "EventConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "event_name": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "event_category": {
            "type": "string"
          },
          "event_schema": {
            "nullable": true,
            "type": "object",
            "additionalProperties": true
          },
          "version": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "created_on": {
            "type": "string"
          },
          "updated_on": {
            "type": "string"
          }
        }
      },
      "EventConfigResponse": {
        "properties": {
          "event_configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventConfig"
            }
          }
        }
      },
      "EventConfigBase": {
        "type": "object",
        "properties": {
          "event_name": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "event_category": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "EventNotifier": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EventSchema": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "object",
            "additionalProperties": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "InternalTransformEvent": {
        "type": "object",
        "properties": {
          "trace_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "created_timestamp": {
            "type": "number"
          }
        }
      },
      "TransformEventData": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/InternalTransformEvent"
          },
          "company_id": {
            "type": "number"
          },
          "contains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "payload": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "TransformEventServiceMeta": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "TransformEventAssociation": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "number"
          }
        }
      },
      "TransformEventRequest": {
        "type": "object",
        "properties": {
          "event_name": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "event_category": {
            "type": "string"
          },
          "event_version": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/EventSchema"
          }
        }
      },
      "ValidateSchemaRequest": {
        "type": "object",
        "properties": {
          "event_name": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "event_category": {
            "type": "string"
          },
          "event_version": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/EventSchema"
          },
          "event_schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "ValidateSchemaResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "TransformEventResponse": {
        "type": "object",
        "properties": {
          "event_trace_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "data": {
            "$ref": "#/components/schemas/TransformEventData"
          },
          "event_name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          },
          "event_type": {
            "type": "string"
          },
          "service_meta": {
            "$ref": "#/components/schemas/TransformEventServiceMeta"
          },
          "association": {
            "$ref": "#/components/schemas/TransformEventAssociation"
          }
        }
      }
    },
    "responses": {},
    "examples": {
      "CredentialsExample": {
        "value": {
          "entity_type": "partner",
          "type": "freshchat",
          "is_enable": true,
          "configuration": {
            "token": "a3e4gf20b-d11g-4512-n3zq-03b9aa7e1yxz",
            "siteId": "a3e8f20b-d97f-452f-bd72-03b9aa7e1bf0",
            "host": "https://wchat.freshchat.com"
          }
        }
      },
      "4XXAPIError": {
        "value": {
          "message": "Oops! Something went wrong. Please try later",
          "status": 400,
          "code": "CX-1003",
          "exception": "",
          "info": "",
          "request_id": "",
          "stack_trace": "",
          "meta": {}
        }
      }
    }
  }
}
