{
  "info": {
    "title": "Fynd Platform's Public APIs",
    "version": "0.1.18",
    "description": "Fynd Platform's Public APIs"
  },
  "openapi": "3.0.2",
  "paths": {
    "/service/common/configuration/v1.0/application/search-application": {
      "get": {
        "description": "Provide application name or domain url",
        "summary": "searchApplication | Search Application",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Provide application name"
          }
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                },
                "example": {
                  "application": {
                    "website": {
                      "enabled": true,
                      "basepath": "/"
                    },
                    "cors": {
                      "domains": []
                    },
                    "auth": {
                      "enabled": true
                    },
                    "description": "test",
                    "channel_type": "store",
                    "cache_ttl": -1,
                    "internal": false,
                    "is_active": true,
                    "mode": "live",
                    "_id": "620b931ee7bfb11f910bf4a3",
                    "company_id": 2,
                    "name": "test",
                    "owner": "5b9b98150df588546aaea6d2",
                    "logo": {
                      "secure_url": "https://hdn-1.addsale.com/x0/company/164/applications/5efc9913f474c329718e3690/application/pictures/free-logo/original/olqHM8LNr-JioMart-Groceries.png"
                    },
                    "favicon": {
                      "secure_url": "https://hdn-1.addsale.com/x0/company/164/applications/5efc9913f474c329718e3690/application/pictures/free-logo/original/olqHM8LNr-JioMart-Groceries.png"
                    },
                    "banner": {
                      "secure_url": "https://hdn-1.addsale.com/x0/company/164/applications/5efc9913f474c329718e3690/application/pictures/landscape-banner/original/D2fr98CUH-JioMart-Groceries.png"
                    },
                    "token": "tPQv0nc23",
                    "tokens": [
                      {
                        "token": "tPQv0nc23",
                        "created_at": "2022-02-15T11:48:46.909Z"
                      }
                    ],
                    "domains": [
                      {
                        "verified": true,
                        "is_primary": true,
                        "is_shortlink": true,
                        "_id": "620b931ee7bfb11f910bf4a4",
                        "name": "qckvv5lhp.hostfynd.dev"
                      }
                    ],
                    "redirections": [],
                    "meta": [],
                    "created_at": "2022-02-15T11:48:46.909Z",
                    "modified_at": "2022-02-15T11:48:46.909Z",
                    "__v": 0,
                    "domain": {
                      "verified": true,
                      "is_primary": true,
                      "is_shortlink": true,
                      "_id": "620b931ee7bfb11f910bf4a4",
                      "name": "qckvv5lhp.hostfynd.dev"
                    },
                    "id": "620b931ee7bfb11f910bf4a3"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                },
                "example": {
                  "value": {
                    "message": "No application found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/service/common/configuration/v1.0/location": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "getLocations | Get countries, states, cities",
        "parameters": [
          {
            "in": "query",
            "name": "location_type",
            "schema": {
              "type": "string",
              "enum": [
                "country",
                "state",
                "city"
              ]
            },
            "description": "Provide location type to query on. Possible values : country, state, city"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "Field is optional when location_type is country. If querying for state, provide id of country. If querying for city, provide id of state."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Locations"
                }
              }
            }
          }
        }
      }
    },
    "/service/common/webhook/v1.0/events": {
      "get": {
        "description": "Get All Webhook Events",
        "summary": "fetchAllWebhookEvents | Get All Webhook Events",
        "tags": [
          "Webhook"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/service/common/webhook/v1.0/events/query-event-details": {
      "post": {
        "description": "Get Webhook Event Details for provided events",
        "summary": "queryWebhookEventDetails | Send webhook event name, type, version, category in request body to get complete details of event from server",
        "tags": [
          "Webhook"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventConfigBase"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/service/common/inventory/v1.0/company/slingshot": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "getConfigByApiKey | Get Slingshot Configuration Of  A Company",
        "description": "REST Endpoint that returns all configuration detail of a company",
        "parameters": [
          {
            "name": "apikey",
            "in": "query",
            "description": "Api key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeSlingshotConfigurationDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeSlingshotConfigurationDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeSlingshotConfigurationDetail"
                }
              }
            }
          }
        }
      }
    },
    "/service/common/inventory/v1.0/company/slingshot/apikey": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "getApiKey | Get Slingshot Configuration Of  A Company",
        "description": "REST Endpoint that returns apikey by username by password",
        "parameters": [
          {
            "name": "user_name",
            "in": "query",
            "description": "Integration id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "company/store token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeObject"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeObject"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeObject"
                }
              }
            }
          }
        }
      }
    },
    "/service/common/inventory/v1.0/company/jobs/code/{code}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "getJobByCode | Get Job Config By Code",
        "description": "REST Endpoint that returns job config by code",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Job Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeJobConfigDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeJobConfigDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeJobConfigDTO"
                }
              }
            }
          }
        }
      }
    },
    "/service/common/inventory/v1.0/company/job/config": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "getJobConfigByIntegrationType | Get Job Configs By Integration Type",
        "description": "REST Endpoint that returns all job Configs by Integration Type",
        "parameters": [
          {
            "name": "integration_type",
            "in": "query",
            "description": "Integration Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "JobConfig current state",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeListJobConfigDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeListJobConfigDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeListJobConfigDTO"
                }
              }
            }
          }
        }
      }
    },
    "/service/common/inventory/v1.0/company/email/jobCode": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "getJobCodesMetrics | Find all the JobCodes from Metrics Collection based on the field Values",
        "description": "Endpoint to return all JobCodes present in Metrics Collection",
        "parameters": [
          {
            "name": "daily_job",
            "in": "query",
            "description": "Daily Job Flag",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "job_code",
            "in": "query",
            "description": "Email Job Code",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeObject"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeObject"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeObject"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "saveJobCodesMetrics | Save JobCode Metrics",
        "description": "Endpoint to save JobCode Metrics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailJobMetrics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "JobCode Metrics entry Created Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeEmailJobMetrics"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeEmailJobMetrics"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeEmailJobMetrics"
                }
              }
            }
          },
          "409": {
            "description": "JobCode Metrics Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeEmailJobMetrics"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseEnvelopeEmailJobMetrics"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApplicationResponse": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/Application"
          }
        }
      },
      "Currency": {
        "properties": {
          "_id": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "decimal_digits": {
            "type": "integer",
            "format": "int32"
          },
          "symbol": {
            "type": "string"
          }
        }
      },
      "Domain": {
        "type": "object",
        "properties": {
          "verified": {
            "type": "boolean"
          },
          "is_primary": {
            "type": "boolean"
          },
          "is_shortlink": {
            "type": "boolean"
          },
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ApplicationWebsite": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "basepath": {
            "type": "string"
          }
        }
      },
      "ApplicationCors": {
        "type": "object",
        "properties": {
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApplicationAuth": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "ApplicationRedirections": {
        "type": "object",
        "properties": {
          "redirect_from": {
            "type": "string"
          },
          "redirect_to": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ApplicationMeta": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "SecureUrl": {
        "type": "object",
        "properties": {
          "secure_url": {
            "type": "string"
          }
        }
      },
      "Application": {
        "properties": {
          "website": {
            "$ref": "#/components/schemas/ApplicationWebsite"
          },
          "cors": {
            "$ref": "#/components/schemas/ApplicationCors"
          },
          "auth": {
            "$ref": "#/components/schemas/ApplicationAuth"
          },
          "description": {
            "type": "string"
          },
          "channel_type": {
            "type": "string"
          },
          "cache_ttl": {
            "type": "integer",
            "format": "int32"
          },
          "is_internal": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          },
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "company_id": {
            "type": "integer",
            "format": "int32"
          },
          "token": {
            "type": "string"
          },
          "redirections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationRedirections"
            }
          },
          "meta": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationMeta"
            }
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "__v": {
            "type": "integer",
            "format": "int32"
          },
          "banner": {
            "$ref": "#/components/schemas/SecureUrl"
          },
          "logo": {
            "$ref": "#/components/schemas/SecureUrl"
          },
          "favicon": {
            "$ref": "#/components/schemas/SecureUrl"
          },
          "domains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Domain"
            }
          },
          "app_type": {
            "type": "string"
          },
          "mobile_logo": {
            "$ref": "#/components/schemas/SecureUrl"
          },
          "domain": {
            "$ref": "#/components/schemas/Domain"
          }
        }
      },
      "NotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "BadRequest": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Failure message.",
            "type": "string"
          }
        }
      },
      "Page": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "current": {
            "type": "integer",
            "format": "int32"
          },
          "has_next": {
            "type": "boolean"
          },
          "item_total": {
            "type": "integer",
            "format": "int32"
          },
          "next_id": {
            "type": "string"
          },
          "has_previous": {
            "type": "boolean"
          }
        }
      },
      "LocationDefaultLanguage": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "English"
          },
          "code": {
            "type": "string",
            "example": "en-IN"
          }
        }
      },
      "LocationDefaultCurrency": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Indian Rupee"
          },
          "symbol": {
            "type": "string",
            "example": "₹"
          },
          "code": {
            "type": "string",
            "example": "INR"
          }
        }
      },
      "LocationCountry": {
        "type": "object",
        "properties": {
          "capital": {
            "type": "string",
            "example": "Kabul"
          },
          "currency": {
            "type": "string",
            "example": "AFN"
          },
          "iso2": {
            "type": "string",
            "example": "AF"
          },
          "iso3": {
            "type": "string",
            "example": "AFG"
          },
          "name": {
            "type": "string",
            "example": "Afghanistan"
          },
          "parent": {
            "type": "string",
            "format": "nullable"
          },
          "phone_code": {
            "type": "string",
            "example": 93
          },
          "type": {
            "type": "string",
            "example": "country"
          },
          "uid": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "__v": {
            "type": "integer",
            "format": "int32",
            "example": 0
          },
          "_id": {
            "type": "string",
            "example": "5ec50c613c403900600fcdec,"
          },
          "default_currency": {
            "$ref": "#/components/schemas/LocationDefaultCurrency"
          },
          "default_language": {
            "$ref": "#/components/schemas/LocationDefaultLanguage"
          }
        }
      },
      "Locations": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "EventConfig": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "event_name": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "event_category": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "created_on": {
            "type": "string"
          }
        }
      },
      "EventConfigList": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventConfig"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "EventConfigResponse": {
        "properties": {
          "event_configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventConfig"
            }
          }
        }
      },
      "SubscriberConfigList": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberResponse"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "EventProcessedStatus": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "subscriber_id": {
            "type": "string"
          },
          "attempt": {
            "type": "integer",
            "format": "int32"
          },
          "response_code": {
            "type": "string"
          },
          "response_message": {
            "type": "string"
          },
          "created_on": {
            "type": "string"
          },
          "processed_on": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          }
        }
      },
      "EventPayload": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "event_trace_id": {
            "type": "string"
          },
          "message_id": {
            "type": "string"
          },
          "event_name": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          }
        }
      },
      "SubscriberConfig": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "webhook_url": {
            "type": "string"
          },
          "association": {
            "$ref": "#/components/schemas/Association"
          },
          "custom_headers": {
            "type": "object"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriberStatus"
          },
          "email_id": {
            "type": "string"
          },
          "auth_meta": {
            "$ref": "#/components/schemas/AuthMeta"
          },
          "event_id": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "SubscriberResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "webhook_url": {
            "type": "string"
          },
          "association": {
            "$ref": "#/components/schemas/Association"
          },
          "custom_headers": {
            "type": "object"
          },
          "email_id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriberStatus"
          },
          "auth_meta": {
            "$ref": "#/components/schemas/AuthMeta"
          },
          "created_on": {
            "type": "string"
          },
          "updated_on": {
            "type": "string"
          },
          "event_configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventConfig"
            }
          }
        }
      },
      "SubscriberEvent": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "subscriber_id": {
            "type": "integer",
            "format": "int32"
          },
          "event_id": {
            "type": "integer",
            "format": "int32"
          },
          "created_date": {
            "type": "string"
          }
        }
      },
      "AuthMeta": {
        "properties": {
          "type": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          }
        }
      },
      "Association": {
        "properties": {
          "company_id": {
            "type": "integer",
            "format": "int32"
          },
          "application_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "extension_id": {
            "type": "string"
          },
          "criteria": {
            "type": "string",
            "enum": [
              {
                "name": "ALL",
                "value": "ALL",
                "description": "Use if you want to subscribe for all application_ids (Sales channels). Provide 'application_id:[]' (empty array) with this config"
              },
              {
                "name": "EMPTY",
                "value": "EMPTY",
                "description": "Use if you are subscribing only company level events. Provide 'application_id:[]' (empty array) with this config"
              },
              {
                "name": "SPECIFIC-EVENTS",
                "value": "SPECIFIC-EVENTS",
                "description": "Use when subscribing to specific application_ids (Sales channels)"
              }
            ]
          }
        }
      },
      "SubscriberStatus": {
        "type": "string",
        "enum": [
          {
            "name": "active",
            "value": "active",
            "description": "Status is active"
          },
          {
            "name": "inactive",
            "value": "inactive",
            "description": "Status is inactive"
          },
          {
            "name": "blocked",
            "value": "blocked",
            "description": "Subscriber is blocked by system due to multiple failed delivery attempts."
          }
        ]
      },
      "EventConfigBase": {
        "type": "object",
        "properties": {
          "event_name": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "event_category": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "GCompany": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "integration": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "uid": {
            "type": "integer",
            "format": "int32"
          },
          "opted": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "stores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GStore"
            }
          },
          "gstores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GStore"
            }
          }
        }
      },
      "GStore": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "integration": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "uid": {
            "type": "integer",
            "format": "int32"
          },
          "opted": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/StoreData"
          }
        }
      },
      "Integration": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "meta": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metum"
            }
          }
        }
      },
      "Metum": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ResponseEnvelopeSlingshotConfigurationDetail": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "total_time_taken_in_millis": {
            "type": "integer",
            "format": "int64"
          },
          "http_status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "items": {
            "$ref": "#/components/schemas/SlingshotConfigurationDetail"
          },
          "payload": {
            "$ref": "#/components/schemas/SlingshotConfigurationDetail"
          },
          "trace_id": {
            "type": "string"
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "SlingshotConfigurationDetail": {
        "type": "object",
        "properties": {
          "integration": {
            "$ref": "#/components/schemas/Integration"
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GCompany"
            }
          }
        }
      },
      "StoreData": {
        "type": "object",
        "properties": {
          "location_id": {
            "type": "string"
          }
        }
      },
      "ResponseEnvelopeObject": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "total_time_taken_in_millis": {
            "type": "integer",
            "format": "int64"
          },
          "http_status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "items": {
            "type": "object"
          },
          "payload": {
            "type": "object"
          },
          "trace_id": {
            "type": "string"
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "DataTresholdDTO": {
        "type": "object",
        "properties": {
          "min_price": {
            "type": "number",
            "format": "double"
          },
          "safe_stock": {
            "type": "integer",
            "format": "int32"
          },
          "period_threshold": {
            "type": "integer",
            "format": "int32"
          },
          "period_threshold_type": {
            "type": "string",
            "enum": [
              "DAYS",
              "HOURS",
              "WEEKS",
              "MONTHS"
            ]
          },
          "period_type_list": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/GenericDTO"
            }
          }
        }
      },
      "GenericDTO": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "JobConfigDTO": {
        "required": [
          "company_id",
          "integration"
        ],
        "type": "object",
        "properties": {
          "integration": {
            "type": "string",
            "writeOnly": true
          },
          "integration_data": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "company_name": {
            "type": "string"
          },
          "company_id": {
            "type": "integer",
            "format": "int32"
          },
          "task_details": {
            "$ref": "#/components/schemas/TaskDTO"
          },
          "threshold_details": {
            "$ref": "#/components/schemas/DataTresholdDTO"
          },
          "job_code": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          }
        }
      },
      "ResponseEnvelopeJobConfigDTO": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "total_time_taken_in_millis": {
            "type": "integer",
            "format": "int64"
          },
          "http_status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "items": {
            "$ref": "#/components/schemas/JobConfigDTO"
          },
          "payload": {
            "$ref": "#/components/schemas/JobConfigDTO"
          },
          "trace_id": {
            "type": "string"
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "TaskDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "group_list": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/GenericDTO"
            }
          }
        }
      },
      "ResponseEnvelopeListJobConfigDTO": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "total_time_taken_in_millis": {
            "type": "integer",
            "format": "int64"
          },
          "http_status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobConfigDTO"
            }
          },
          "payload": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobConfigDTO"
            }
          },
          "trace_id": {
            "type": "string"
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      },
      "EmailJobMetrics": {
        "type": "object",
        "properties": {
          "executed": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "job_code": {
            "type": "string"
          },
          "daily_job": {
            "type": "boolean"
          },
          "last_executed_on": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ResponseEnvelopeEmailJobMetrics": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "total_time_taken_in_millis": {
            "type": "integer",
            "format": "int64"
          },
          "http_status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "items": {
            "$ref": "#/components/schemas/EmailJobMetrics"
          },
          "payload": {
            "$ref": "#/components/schemas/EmailJobMetrics"
          },
          "trace_id": {
            "type": "string"
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        }
      }
    },
    "responses": {},
    "examples": {}
  }
}
